# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
 
  config.vm.provider "virtualbox" do |vb|
      vb.memory = "8196"
      vb.cpus = "4"
  end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  
  config.vm.network "private_network", type: "dhcp"  
  
  # manage git stuff on host
  config.vm.synced_folder "..", "/opt/lsds"
  

  # maven cache on host
  config.vm.synced_folder "/var/tmp/vagrant/m2_cache/", "/home/vagrant/.m2/repository"

  # https://stackoverflow.com/questions/33730820/create-an-apt-cache-on-host-for-multiple-vagrant-installations
  # add the host apt cache so packages don't have to be downloaded each time
  # you need to create this before you start vagrant up:
  #sudo mkdir -p /var/tmp/vagrant/apt-archives/
  #sudo mkdir -p /var/tmp/vagrant/apt-lists/
  #sudo chmod 777 /var/tmp/vagrant/apt-archives/ /var/tmp/vagrant/apt-lists/
  config.vm.synced_folder "/var/tmp/vagrant/apt-archives/", "/var/cache/apt/archives/" #, type: "nfs"
  config.vm.synced_folder "/var/tmp/vagrant/apt-lists/", "/var/lib/apt/lists" #, type: "nfs"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    
    # add _apt to vagrant group for caching to work
 

    # disable IPv6
    echo "net.ipv6.conf.all.disable_ipv6 = 1
    net.ipv6.conf.default.disable_ipv6 = 1
    net.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.conf
    sysctl -p

    # install docker repo
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    # install build tools for sgx-lkl and sgx-spark
    sudo apt-get update

    # install docker (for spark-sgx)
    apt-cache policy docker-ce
    sudo apt-get install -y docker-ce
    sudo usermod -a -G docker vagrant

    # install sgx-lkl build tools
    sudo apt-get install -y make gcc bc python xutils-dev curl openjdk-8-jdk gdb
    sudo apt-get install -y --no-install-recommends scala libtool autoconf curl xutils-dev git build-essential maven openjdk-8-jdk ssh bc python autogen wget autotools-dev sudo automake
    sudo apt-get install subversion

    # install google protocolbuffs
    cd /tmp
    wget https://github.com/google/protobuf/releases/download/v2.5.0/protobuf-2.5.0.tar.gz
    tar xvf protobuf-2.5.0.tar.gz
    cd protobuf-2.5.0
    ./autogen.sh && ./configure && make && sudo make install
    apt-get install -y --no-install-recommends libprotoc-dev
    
    # install taps for sgx network support
    ip tuntap add dev sgxlkl_tap0 mode tap user 'vagrant'
    ip link set dev sgxlkl_tap0 up
    ip addr add dev sgxlkl_tap0 10.0.1.254/24
    # Forward traffic from host's public interface port 60321 to SGX-LKL port 6379
    #sudo iptables -t nat -I PREROUTING -p tcp -d `hostname -i` --dport 60321 -j DNAT --to-destination 10.0.1.1:6379
    #sudo iptables -I FORWARD -m state -d 10.0.1.0/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT
    #sudo iptables -I FORWARD -m state -s 10.0.1.0/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT
    #sudo sysctl -w net.ipv4.ip_forward=1

    # make & install the sgx driver 
    apt-get install linux-headers-$(uname -r)
    cd /opt
    git clone https://github.com/intel/linux-sgx-driver.git
    cd linux-sgx-driver
    make
    mkdir -p "/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx" 
    cp isgx.ko "/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx"
    sh -c "cat /etc/modules | grep -Fxq isgx || echo isgx >> /etc/modules"
    /sbin/depmod
    /sbin/modprobe isgx

  SHELL
end
